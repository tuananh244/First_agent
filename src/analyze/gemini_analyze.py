import sys
from pathlib import Path
import re

# Th√™m root v√†o sys.path ƒë·ªÉ import gemini module ·ªü th∆∞ m·ª•c cha
sys.path.append(str(Path(__file__).resolve().parent.parent))
import gemini  # ƒê·∫£m b·∫£o b·∫°n ƒë√£ c√≥ module n√†y: gemini.call_gemini(prompt)


def extract_sections_from_markdown(file_path):
    """
    Extract Git Log Summary and Diff Summary from a Markdown file.
    """
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()

    sections = {}

    log_match = re.search(r"## üìå Git Log Summary\n```bash\n(.*?)```", content, re.DOTALL)
    if log_match:
        sections['git_log'] = log_match.group(1).strip()

    diff_match = re.search(r"## üß© Diff Summary \(all files changed\)\n```diff\n(.*?)```", content, re.DOTALL)
    if diff_match:
        sections['diff_summary'] = diff_match.group(1).strip()

    return sections

def analyze_with_gemini(git_log, diff_summary):
    """
    Send Git log and diff summary to Gemini for initial security-related analysis.
    """
    prompt = f"""
You are a security-focused code reviewer.

Below is the Git commit log and diff summary between two software versions.

--- Git Log ---
{git_log}

--- Diff Summary ---
{diff_summary}

Please answer the following in a structured markdown format with clear sections and bullet points:

## 1. üõ°Ô∏è Security-Relevant Files/Paths
List the files or paths in the diff that are likely related to:
- Security patches (e.g., auth, crypto, input validation, WAF, etc.)
- Sensitive functionality (e.g., configuration, certificate handling)

## 2. üîê Security-Relevant Commits
List any commits (with hash and message) that suggest:
- Security fixes
- Vulnerability patches
- Updates to sensitive dependencies (e.g., cryptographic libraries)

## 3. üß† Initial Security Hypothesis
Provide a concise technical hypothesis:
- What kind of vulnerabilities are being addressed?
- Are there signs of misconfiguration, injection risks, permission issues, or insecure defaults?
- Any components worth deep manual review?

Use bullet points or numbered lists wherever helpful.
Be concise, technical, and structured.
"""

    return gemini.call_gemini(prompt)

def save_analysis_to_md(result: str, output_path):
    """
    L∆∞u k·∫øt qu·∫£ ph√¢n t√≠ch Gemini v√†o file markdown.

    Args:
        result (str): K·∫øt qu·∫£ ph√¢n t√≠ch.
        output_path (str): ƒê∆∞·ªùng d·∫´n file l∆∞u k·∫øt qu·∫£.
    """
    with open(output_path, "w", encoding="utf-8") as f:
        f.write("# üß† Gemini Security Analysis\n\n")
        f.write(result.strip())
    print(f"‚úÖ Gemini analysis saved to: {output_path}")

def run_gemini_analysis_on_diff_report(input_markdown_path: str, output_markdown_path: str) -> str:
    """
    Ph√¢n t√≠ch b·∫£o m·∫≠t v·ªõi Gemini t·ª´ file markdown ch·ª©a Git log v√† diff.

    Args:
        input_markdown_path (str): ƒê∆∞·ªùng d·∫´n t·ªõi file markdown ch·ª©a git log v√† diff.
        output_markdown_path (str): ƒê∆∞·ªùng d·∫´n t·ªõi file ƒë·ªÉ l∆∞u k·∫øt qu·∫£ ph√¢n t√≠ch.

    Returns:
        str: K·∫øt qu·∫£ ph√¢n t√≠ch t·ª´ Gemini.
    """
    # B∆∞·ªõc 1: Tr√≠ch xu·∫•t Git log v√† Diff t·ª´ markdown
    sections = extract_sections_from_markdown(input_markdown_path)
    
    git_log = sections.get("git_log")
    diff_summary = sections.get("diff_summary")

    if not git_log and not diff_summary:
        raise ValueError("‚ùå Kh√¥ng t√¨m th·∫•y c·∫£ Git Log Summary v√† Diff Summary trong file markdown.")
    if not git_log:
        raise ValueError("‚ùå Kh√¥ng t√¨m th·∫•y m·ª•c '## üìå Git Log Summary' trong file markdown.")
    if not diff_summary:
        raise ValueError("‚ùå Kh√¥ng t√¨m th·∫•y m·ª•c '## üß© Diff Summary (all files changed)' trong file markdown.")

    # B∆∞·ªõc 2: G·ª≠i prompt cho Gemini
    gemini_result = analyze_with_gemini(git_log, diff_summary)

    # B∆∞·ªõc 3: Ghi k·∫øt qu·∫£ ph√¢n t√≠ch ra file
    save_analysis_to_md(gemini_result, output_markdown_path)

    return gemini_result