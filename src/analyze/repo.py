# clone_repo.py
# Tr√≠ch xu·∫•t v√† clone GitHub repository t·ª´ URL

import os
import re
import subprocess
import shutil
from urllib.parse import urlparse

def extract_repo_url(github_url: str) -> str:
    """
    Tr√≠ch xu·∫•t URL c·ªßa GitHub repository g·ªëc t·ª´ b·∫•t k·ª≥ URL GitHub n√†o.
    """
    match = re.match(r"https?://github\.com/([^/]+/[^/]+)", github_url)
    if match:
        return f"https://github.com/{match.group(1)}.git"
    raise ValueError(f"‚ùå Kh√¥ng th·ªÉ tr√≠ch xu·∫•t repository t·ª´ URL: {github_url}")

def clone_temp_repo_from_link(github_url: str, temp_base_dir: str = "temp_repos") -> str:
    """
    Clone GitHub repo v·ªÅ th∆∞ m·ª•c t·∫°m (temporary directory).
    N·∫øu ƒë√£ t·ªìn t·∫°i th√¨ b·ªè qua. Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n local t·ªõi repo.
    """
    repo_url = extract_repo_url(github_url)
    repo_name = repo_url.rstrip(".git").split("/")[-1]
    owner = repo_url.split("/")[-2]
    repo_local_path = os.path.join(temp_base_dir, f"{owner}__{repo_name}")

    os.makedirs(temp_base_dir, exist_ok=True)

    if not os.path.exists(repo_local_path):
        try:
            subprocess.run(["git", "clone", "--depth=1", repo_url, repo_local_path], check=True)
        except subprocess.CalledProcessError as e:
            raise RuntimeError(f"‚ùå L·ªói khi clone repo: {e}")
    else:
        print(f"‚úÖ Repo ƒë√£ t·ªìn t·∫°i ·ªü {repo_local_path}, b·ªè qua clone.")

    return repo_local_path

def cleanup_temp_repo(path: f"temp_repos") -> None:
    """
    X√≥a to√†n b·ªô th∆∞ m·ª•c repo t·∫°m sau khi ph√¢n t√≠ch.
    """
    if os.path.exists(path):
        shutil.rmtree(path)
        print(f"üßπ ƒê√£ x√≥a th∆∞ m·ª•c t·∫°m: {path}")
    else:
        print(f"‚ö†Ô∏è Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: {path}")